type UsageTerms = 
 record {
   attribution: bool;
   fixedFee: nat64;
   royaltyFee: nat32;
 };
type UniverseMintingRequest = 
 record {
   availableUsageTerms: vec UsageTerms;
   description: opt text;
   imageUrl: opt text;
   name: text;
   tags: vec text;
 };
type Universe = 
 record {
   availableUsageTerms: vec UsageTerms;
   description: opt text;
   id: TokenId;
   imageUrl: opt text;
   name: text;
   owner: principal;
   tags: vec text;
 };
type TokenId = nat64;
type Result_2 = 
 variant {
   Err: ApiError;
   Ok: CostEstimate;
 };
type Result_1 = 
 variant {
   Err: QueryError;
   Ok: Event;
 };
type Result = 
 variant {
   Err: QueryError;
   Ok: Universe;
 };
type QueryError = 
 variant {
   NotFound;
   Other;
 };
type MintingRequest = 
 record {
   event: opt EventMintingRequest;
   universe: opt UniverseMintingRequest;
 };
type MintingReceiptSuccess = 
 record {
   eventTokenId: opt TokenId;
   id: nat;
   transactions: vec CostItem;
   universeTokenId: opt TokenId;
 };
type MintingReceipt = 
 variant {
   Err: ApiError;
   Ok: MintingReceiptSuccess;
 };
type EventMintingRequest = 
 record {
   data: blob;
   description: opt text;
   imageUrl: opt text;
   name: text;
   price: nat64;
   startTime: opt nat64;
   totalSupply: nat32;
   universeIds: vec TokenId;
 };
type Event = 
 record {
   data: blob;
   description: opt text;
   id: nat64;
   imageUrl: opt text;
   name: text;
   owner: principal;
   price: nat64;
   remainingTickets: nat32;
   startTime: opt nat64;
   totalSupply: nat32;
   universeIds: vec TokenId;
 };
type CostItem = 
 record {
   cost: nat64;
   description: text;
   to: principal;
 };
type CostEstimate = 
 record {
   items: vec CostItem;
   total: nat64;
 };
type ApiError = 
 variant {
   InsufficientBalance;
   InvalidTokenId;
   Other;
   TransactionFailed;
   Unauthorized;
   ZeroAddress;
 };
service : {
  estimateMintingCost: (MintingRequest) -> (Result_2) query;
  getEvent: (TokenId) -> (Result_1) query;
  getEvents: () -> (vec Event) query;
  getUniverse: (TokenId) -> (Result) query;
  getUniverses: () -> (vec Universe) query;
  mint: (MintingRequest) -> (MintingReceipt);
  totalEvents: () -> (nat64) query;
}
